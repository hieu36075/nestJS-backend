// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  userName         String?
  email            String?           @unique
  hashedPassword   String?
  createdAt        DateTime          @default(now()) @map(name: "created_at")
  updatedAt        DateTime          @updatedAt @map(name: "updated_at")
  role             Role              @relation(fields: [roleId], references: [id])
  roleId           String
  oders            Order[]
  voucher          UserVoucher[]
  comment          Comment[]
  notifications    Notification[]
  hotels           Hotel[]
  profile          Profile?
  dateOfBirth      DateTime?
  socketConnection SocketConnection?
  isActive         Boolean           @default(true)
  hashedRt         String?
  message          Message[]
  userRoomMessage  UserRoomMessage[]

  @@map(name: "users")
}

model SocketConnection {
  id       String @id @default(cuid())
  userId   String @unique
  socketId String @unique
  user     User   @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  data      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    String
  actionId  String
}

model RoomMessage {
  id      String    @id @default(cuid())
  message Message[]
  userRoomMessage UserRoomMessage[]
}

model UserRoomMessage {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  room  RoomMessage    @relation(fields: [roomId], references: [id])
  roomId String
}

model Message {
  id          String      @id @default(cuid())
  content     String
  user        User        @relation(fields: [sederId], references: [id])
  sederId     String
  roomMessage RoomMessage @relation(fields: [roomId], references: [id])
  roomId      String
  createAt    DateTime   @default(now())
}



model Role {
  id   String @id @default(cuid())
  name String
  user User[]
}

model Profile {
  id          String  @id @default(cuid())
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique
  firstName   String?
  lastName    String?
  fullName    String
  phoneNumber String?
  address     String?
  avatarUrl   String?
}

model Comment {
  id          String         @id @default(cuid())
  name        String
  description String
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  hohel       Hotel          @relation(fields: [hotelId], references: [id])
  hotelId     String
  images      ImageComment[]
}

model Category {
  id       String  @id @default(cuid())
  name     String
  imageUrl String?
  hotels   Hotel[]
  rooms    Room[]
}

model CategoryRoom {
  id           String @id @default(cuid())
  name         String
  hotel        Hotel  @relation(fields: [hotelId], references: [id])
  hotelId      String
  numberOrBeds Int
  rooms        Room[]
}

model Amenity {
  id     String  @id @default(cuid())
  name   String  @unique
  hotels Hotel[]
}

model Hotel {
  id            String         @id @default(cuid())
  name          String
  address       String
  country       Country        @relation(fields: [countryId], references: [id])
  countryId     String
  phoneNumber   String
  starRating    Int?
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String
  checkInTime   String
  checkOutTime  String
  extraInfo     String?
  isActive      Boolean        @default(true)
  city          City           @relation(fields: [cityId], references: [id]) // Thêm mối quan hệ với thành phố
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  cityId        String
  latitude      Float
  longitude     Float
  rooms         Room[]
  images        ImageHotel[]
  comments      Comment[]
  amenities     Amenity[]
  oders         Order[]
  categoryRooms CategoryRoom[]
}

model Country {
  id     String  @id @default(cuid())
  name   String
  image  String?
  hotels Hotel[]
  cities City[]
}

model City {
  id        String  @id @default(cuid())
  name      String
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  hotels    Hotel[]
}

model Room {
  id               String         @id @default(cuid())
  name             String
  description      String
  price            Int
  category         Category       @relation(fields: [categoryId], references: [id])
  categoryId       String
  hotel            Hotel          @relation(fields: [hotelId], references: [id])
  hotelId          String
  occupancy        Int
  imageRoom        ImageRoom[]
  categoryRoom     CategoryRoom   @relation(fields: [categoryRoomId], references: [id])
  categoryRoomId   String
  status           RoomStatus     @default(AVAILABLE)
  expectedCheckIn  DateTime?
  expectedCheckOut DateTime?
  area             Int?
  orderDetails     OrderDetails[]
}

enum RoomStatus {
  AVAILABLE
  BOOKED
  RETURNED
}

model ImageHotel {
  id      String @id @default(cuid())
  hotel   Hotel  @relation(fields: [hotelId], references: [id])
  hotelId String
  url     String
}



model ImageRoom {
  id     String @id @default(cuid())
  url    String
  room   Room   @relation(fields: [roomId], references: [id])
  roomId String
}



model ImageComment {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  date        DateTime
  comment     Comment  @relation(fields: [commentId], references: [id])
  commentId   String
}

model Order {
  id           String         @id @default(cuid())
  checkIn      DateTime
  checkOut     DateTime
  price        Int
  status       OrderStatus    @default(IN_PROGRESS)
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  hotel        Hotel          @relation(fields: [hotelId], references: [id])
  hotelId      String
  orderdetails OrderDetails[]
}

model OrderDetails {
  id      String @id @default(cuid())
  oder    Order  @relation(fields: [orderId], references: [id])
  orderId String
  room    Room   @relation(fields: [roomId], references: [id])
  roomId  String
  price   Int
}

enum OrderStatus {
  IN_PROGRESS
  DONE
}

model UserVoucher {
  id     String        @id @default(cuid())
  user   User          @relation(fields: [userId], references: [id])
  userId String
  status VoucherStatus @default(isAvaiable)
}

enum VoucherStatus {
  isAvaiable
  avaiable
}

model Voucher {
  id          String @id @default(cuid())
  name        String
  description String
}
