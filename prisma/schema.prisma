// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String       @default(cuid()) @id
  name          String?
  firstName     String?
  lastName      String?
  email         String?   @unique
  hashedPassword String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  role          Role      @relation(fields: [roleId], references: [id]) 
  roleId        String    
  posts         Post[]
  oders         Order[]
  voucher       UserVoucher[]
  comment       Comment[]
  notifications Notification[]
  hotels         Hotel[]
  profile       Profile?
  googleAccount GoogleAcount?
  phoneNumber   String?     
  address       String?      
  dateOfBirth   DateTime?  
  socketConnection SocketConnection?  
  isActive      Boolean     @default(true) 
  hashedRt      String?
  @@map(name: "users")
}

model SocketConnection {
  id       String @default(cuid()) @id
  userId   String @unique
  socketId String @unique
  user     User   @relation(fields: [userId], references: [id])
}
model Notification {
  id        String       @default(cuid()) @id
  data      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model GoogleAcount {
  id             String      @default(cuid()) @id
  token          String
  refreshToken   String?
  user           User       @relation(fields: [userId], references: [id])
  userId         String     @unique
}

model Role{
  id            String       @default(cuid()) @id
  name          String        
  user          User[]
}

model Profile {
  id            String       @default(cuid()) @id
  user          User         @relation(fields: [userId], references: [id])
  userId        String       @unique
  fullName      String
  address       String?
  phone         String?
  avatarUrl     String?
}

model Comment {
  id            String       @default(cuid()) @id
  name          String
  description   String
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  hohel         Hotel        @relation(fields: [hotelId], references: [id])
  hotelId       String
  images         ImageComment[]
}
model Category{
  id            String       @default(cuid()) @id
  name          String
  imageUrl      String?
  hotels        Hotel[]
  rooms          Room[]
}

model CategoryRoom {
  id         String    @default(cuid()) @id
  name       String
  hotel       Hotel  @relation(fields: [hotelId], references: [id])
  hotelId     String
  numberOrBeds Int
  rooms      Room[]  
}

model Amenity{
  id            String       @default(cuid()) @id
  name          String       @unique
  hotels        Hotel[]
}

model Hotel {
  id            String       @default(cuid()) @id
  name          String
  address       String
  country       Country   @relation(fields: [countryId], references: [id])
  countryId     String
  phoneNumber   String
  starRating    Int? 
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  checkInTime   String
  checkOutTime  String
  extraInfo     String?
  isActive      Boolean     @default(true) 
  city          City        @relation(fields: [cityId], references: [id]) // Thêm mối quan hệ với thành phố
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  cityId        String
  rooms         Room[]
  images        ImageHotel[]
  comments      Comment[]
  amenities     Amenity[]       
  oders         Order[]
  categoryRooms CategoryRoom[]
}

model Country{
  id            String       @default(cuid()) @id
  name          String
  image         String?
  hotels        Hotel[] 
  cities        City[]     
}

model City {
  id        String       @default(cuid()) @id
  name      String
  country   Country      @relation(fields: [countryId], references: [id])
  countryId String
  hotels    Hotel[]  
}

model Room{
  id            String       @default(cuid()) @id
  name          String  
  description   String
  price         Int
  category      Category     @relation(fields: [categoryId], references: [id])
  categoryId    String
  hotel         Hotel        @relation(fields: [hotelId], references: [id])
  hotelId       String
  occupancy     Int 
  imageRoom     ImageRoom[]
  categoryRoom  CategoryRoom @relation(fields: [categoryRoomId], references: [id])
  categoryRoomId String
  status          RoomStatus   @default(AVAILABLE)
  expectedCheckIn DateTime?
  expectedCheckOut DateTime?
  area            Int?
  orderDetails    OrderDetails[]
}

enum RoomStatus {
  AVAILABLE
  BOOKED
  RETURNED
}

model ImageHotel{
  id        String     @default(cuid()) @id
  hotel     Hotel      @relation(fields: [hotelId], references: [id])
  hotelId   String
  url       String
}

model Post {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
  images     ImagePost[]
}

model ImageRoom{
  id            String       @default(cuid()) @id
  url           String
  room          Room         @relation(fields: [roomId], references: [id])
  roomId        String       

}

model ImagePost{
  id            String       @default(cuid()) @id
  title         String
  description   String
  date          DateTime
  imageUrl      String?
  post          Post?        @relation(fields: [postId], references: [id])
  postId        String
}


model ImageComment {
  id            String       @default(cuid()) @id
  title         String
  description   String
  imageUrl      String?
  date          DateTime
  comment       Comment      @relation(fields: [commentId], references: [id])
  commentId     String
}


model Order{
  id            String       @default(cuid()) @id      
  checkIn       DateTime
  checkOut      DateTime
  price         Int
  status        OrderStatus  @default(IN_PROGRESS)
  user          User         @relation(fields: [userId], references: [id])
  userId        String    
  hotel         Hotel         @relation(fields: [hotelId], references: [id])
  hotelId       String
  orderdetails  OrderDetails[]
}

model OrderDetails{
  id            String              @default(cuid()) @id
  oder          Order               @relation(fields: [orderId], references: [id]) 
  orderId       String    
  room          Room                @relation(fields: [roomId], references: [id])
  roomId        String              
  price         Int
}

enum OrderStatus {
  IN_PROGRESS 
  DONE
}

model UserVoucher{
  id            String       @default(cuid()) @id   
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  status        VoucherStatus @default(isAvaiable)
}

enum VoucherStatus {
  isAvaiable
  avaiable 
}

model Voucher {
  id            String       @default(cuid()) @id  
  name          String
  description   String 
}
